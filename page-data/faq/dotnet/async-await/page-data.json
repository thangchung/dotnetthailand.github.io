{"componentChunkName":"component---src-templates-docs-js","path":"/faq/dotnet/async-await","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"a76c5087-2f44-5c7b-8472-6a33f91afd25","title":"Async/Await","slug":"/faq/dotnet/async-await"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Async/Await\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": false\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar CheckListItem = makeShortcode(\"CheckListItem\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Async/Await checklist\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Make sure you have done these items when working with asynchronous programming.\"), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use async/await all the ways.\")), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Don't use blocking method e.g. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task.WaitAll()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".Result\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".Wait()\"), \".\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://blog.stephencleary.com/2012/07/dont-block-on-async-code.html\"\n  }, \"Read more\"))), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async Task\"), \" for a method that does not return a value.\")), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"async Task<TResult>\"), \" for a method that returns a value.\")), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"async void\"), \" only for an event handler e.g in Windows App.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://app.pluralsight.com/guides/returning-void-from-c-async-method\"\n  }, \"Read more\"))), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Add \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Async\"), \" suffix to async method's name.\")), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"configureAwait(false)\"), \" for a class library.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://app.pluralsight.com/guides/advanced-tips-using-task-run-async-wait#module-dontcontinueonthemainthreadunnecessarily\"\n  }, \"Read more\"))), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Avoid unnecessary use of async modifier if we don't need to resume a main thread/UI thread to do anything after a task is complete, just return a task and don't await.\\nDo not wrap a task in try/catch block because it has never thrown an exception. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/agoda-com/standards-c-sharp/blob/master/docs/async/avoid-unnecessary-async.md\"\n  }, \"Read more\"))), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In a using block, always await a task because we want to dispose a resource object after a task has been complete.\\nRead more \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://stackoverflow.com/a/19103343/1872200\"\n  }, \"REF\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.thebillwagner.com/blog/Item/2017-05-03-ThecuriouscaseofasyncawaitandIDisposable\"\n  }, \"REF\"))), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use await when you want to do stuff in a UI thread after getting a result.\\nWith await you can handle an exception as usual.\")), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Lambda expression supports async keyword, you can put async before Lambda parameters and put await in Lambda body.\")), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task.Run\"), \" without \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await\"), \" leads to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"fire and forget\"), \" behavior. It will execute code in a thread of ThreadPool.\\nPrefer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task.Run\"), \" over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task.Factory.StartNew\"), \" and over \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"new Task()\"), \"\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/agoda-com/standards-c-sharp/blob/master/docs/async/task-run.md\"\n  }, \"Read more\"))), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use async for IO bound. It is good for scalability and does not require extra thread so you don't use a thread just for waiting a long-running IO process.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://app.pluralsight.com/guides/using-task-run-async-await\"\n  }, \"Read more\"))), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Avoid mixing synchronous and asynchronous code.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/agoda-com/standards-c-sharp/blob/master/docs/async/avoid-mixing-async-sync.md\"\n  }, \"Read more\"))), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Avoid race conditions with proper synchronization.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/agoda-com/standards-c-sharp/blob/master/docs/async/avoid-race-conditions.md\"\n  }, \"Read more\"))), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When you develop interfaces do not expose both sync and async versions of methods.\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/agoda-com/standards-c-sharp/blob/master/docs/async/expose-async-method.md\"\n  }, \"Read more\"))), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use await instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task.ContinueWith\"), \".\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/agoda-com/standards-c-sharp/blob/master/docs/async/never-task-continue-with.md\"\n  }, \"Read more\"))), mdx(CheckListItem, {\n    mdxType: \"CheckListItem\"\n  }, mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"await Task.WhenAny/All\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Task.WaitAny/All\"), \".\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/agoda-com/standards-c-sharp/blob/master/docs/async/when-any-all.md\"\n  }, \"Read more\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#asyncawait-checklist","title":"Async/Await checklist"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"faq/dotnet/async-await.mdx","fields":{"gitLogLatestAuthorName":"Suthep Sangvirotjanaphat","gitLogLatestAuthorEmail":"suthep@gfbd.co.th","gitLogLatestDate":"2 minutes ago"}},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":false}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"78cf4d39ddca0eb4163122b66827e994c937221b","date":"2021-04-20 06:58"}},"pageContext":{"id":"a76c5087-2f44-5c7b-8472-6a33f91afd25"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}