{"componentChunkName":"component---src-templates-docs-js","path":"/programming-cookbook/logging/NLog","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"6f0f38f9-1b2a-5824-9f61-1ec58174bb04","title":"NLog","slug":"/programming-cookbook/logging/NLog"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"NLog\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"How to setup NLog\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a new .NET Framework console project. This can be applied to .NET Core\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Install NLog Nuget package.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"install-package NLog\\n\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Edit NLog.config file\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\\n<nlog xmlns=\\\"http://www.nlog-project.org/schemas/NLog.xsd\\\"\\n      xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n      xsi:schemaLocation=\\\"http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd\\\"\\n      autoReload=\\\"true\\\"\\n      throwExceptions=\\\"false\\\"\\n      internalLogLevel=\\\"Off\\\" internalLogFile=\\\"c:\\\\temp\\\\nlog-internal.log\\\">\\n\\n    <!-- optional, add some variables\\n    https://github.com/nlog/NLog/wiki/Configuration-file#variables\\n    -->\\n    <variable name=\\\"myvar\\\" value=\\\"myvalue\\\"/>\\n\\n    <!--\\n    See https://github.com/nlog/nlog/wiki/Configuration-file\\n    for information on customizing logging rules and outputs.\\n    -->\\n    <targets>\\n      <target xsi:type=\\\"File\\\" name=\\\"Logfile\\\"\\n              fileName=\\\"${basedir}/Logs/date-${date:format=yyyyMMdd}.log\\\"\\n              archiveAboveSize=\\\"10485760\\\"\\n              layout=\\\"${longdate} | ${mdc:item=Message}\\\" />\\n    </targets>\\n\\n    <rules>\\n      <logger name=\\\"Logfile\\\" minlevel=\\\"Trace\\\" writeTo=\\\"Logfile\\\" />\\n     </rules>\\n</nlog>\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set up the main class.\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-c#\"\n  }, \"  // Import NLog classes.\\n  using NLog;\\n\\n  public static class Program\\n  {\\n      public static void Main(string[] args)\\n      {\\n          Logger logger = LogManager.GetCurrentClassLogger();\\n          logger = LogManager.GetLogger(\\\"Logfile\\\");\\n          MappedDiagnosticsContext.Set(\\\"Message\\\", \\\"Hello NLog\\\");\\n          logger.Log(LogLevel.Trace, \\\"\\\");\\n      }\\n  }\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#how-to-setup-nlog","title":"How to setup NLog"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"programming-cookbook/logging/NLog.md","fields":{"gitLogLatestAuthorName":"Suthep Sangvirotjanaphat","gitLogLatestAuthorEmail":"suthep@gfbd.co.th","gitLogLatestDate":"2 minutes ago"}},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"78cf4d39ddca0eb4163122b66827e994c937221b","date":"2021-04-20 06:58"}},"pageContext":{"id":"6f0f38f9-1b2a-5824-9f61-1ec58174bb04"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}