{"componentChunkName":"component---src-templates-docs-js","path":"/programming-cookbook/testing/jest","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"eb9bf748-1923-55d4-89cf-a9d8c1c1555a","title":"Jest","slug":"/programming-cookbook/testing/jest"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Jest\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Folder structure\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We suggest to create a test file inside a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"__tests__\"), \" folder which is next to the file that you are going to test.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Here is what it looks like:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"/src/components/__tests__/ComponentA.test.tsx\\n/src/components/__tests__/ComponentB.test.tsx\\n/src/components/ComponentA.tsx\\n/src/components/ComponentB.tsx\\n\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"With this structure we get these benefits:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Easy to find a test file of production code, less switching between files.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not need to make a folder structure of test to match a folder structure of production file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Easy to check if a production file has test or not.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Easy to maintain and put other related test files, e.g mock, snapshot inside \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"tests\"), \" folder\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Sources & Credit\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://stackoverflow.com/a/62765143/1872200\"\n  }, \"https://stackoverflow.com/a/62765143/1872200\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.facebook.com/groups/react.th/permalink/4035993509754708\"\n  }, \"https://www.facebook.com/groups/react.th/permalink/4035993509754708\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://medium.com/opendoor-labs/testing-react-components-with-jest-a7e8e4d312d8\"\n  }, \"https://medium.com/opendoor-labs/testing-react-components-with-jest-a7e8e4d312d8\")))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"What is Snapshot testing?\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Save output of a component and compare with a new component output if they match\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://medium.com/componently/no-more-snapshots-folders-with-jest-98de26681764\"\n  }, \"https://medium.com/componently/no-more-snapshots-folders-with-jest-98de26681764\")))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Expect\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \".toBe\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use to compare primitive values or to check referential identity of object instances.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It calls \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Object.is\"), \" to compare values\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\"\n  }, \"Equality comparisons and sameness\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\"\n  }, \"Object.is()\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Don't use .toBe with floating-point numbers. Use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".toBeCloseTo\"), \" instead.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It reports a deep comparison of values if the assertion fails. If differences between properties do not help you to understand why a test fails, especially if the report is large, then you might move the comparison into the expect function. For example, to assert whether or not elements are the same instance:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rewrite \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"expect(received).toBe(expected)\"), \" as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"expect(Object.is(received, expected)).toBe(true)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"rewrite \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"expect(received).not.toBe(expected)\"), \" as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"expect(Object.is(received, expected)).toBe(false)\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I think it reports deep comparison value because \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".toBe\"), \" is used for primitive values.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Interesing article \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://dev.to/thejaredwilcurt/why-you-should-never-use-tobe-in-jest-48ca\"\n  }, \"Why you should never use .toBe in Jest\")))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \".toEqual\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use .toEqual to compare recursively all properties of object instances (also known as \\\"deep\\\" equality). It calls Object.is to compare primitive values.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \".toEqual won't perform a deep equality check for two errors. Only the message property of an Error is considered for equality. It is recommended to use the .toThrow matcher for testing against errors\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \".toBe VS .toEqual\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"// Two players, both happen to have the same name and age\\nconst player1 = { name: 'John', age: 25 };\\nconst player2 = { name: 'John', age: 25 };\\nconst players = [player1, player2];\\n\\nfunction getFirstPlayer () {\\n  return players[0];\\n}\\n\\ntest('getFirstPlayer', () => {\\n  // USING TOBE\\n  expect(getFirstPlayer())\\n    .toBe(player1); // passes\\n\\n  expect(getFirstPlayer())\\n    .not.toBe(player2); // passes\\n\\n  // USING TOEQUAL\\n  expect(getFirstPlayer())\\n    .toEqual(player1); // passes\\n\\n  expect(getFirstPlayer())\\n    .not.toEqual(player2); // fails\\n});\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#folder-structure","title":"Folder structure","items":[{"url":"#sources--credit","title":"Sources & Credit"}]},{"url":"#what-is-snapshot-testing","title":"What is Snapshot testing?"},{"url":"#expect","title":"Expect","items":[{"url":"#tobe","title":".toBe"},{"url":"#toequal","title":".toEqual"},{"url":"#tobe-vs-toequal","title":".toBe VS .toEqual"}]}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"programming-cookbook/testing/jest.md","fields":{"gitLogLatestAuthorName":"Suthep Sangvirotjanaphat","gitLogLatestAuthorEmail":"suthep@gfbd.co.th","gitLogLatestDate":"2 minutes ago"}},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"78cf4d39ddca0eb4163122b66827e994c937221b","date":"2021-04-20 06:58"}},"pageContext":{"id":"eb9bf748-1923-55d4-89cf-a9d8c1c1555a"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}